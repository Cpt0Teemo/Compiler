# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= (include)* (structdecl)* (vardecl)* (fundecl)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT ";"                       # normal declaration, e.g. int a;
             | type IDENT "[" INT_LITERAL "]" ";"   # array declaration, e.g. int a[2];

fundecl    ::= type IDENT "(" params ")" block    # function declaration

type       ::= ("int" | "char" | "void" | structtype) ["*"]
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("," type IDENT)* ]

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp stmt'                              # expression/assignment statement, e.g. a function call

stmt'      ::= assign | ";"
assign     ::= "=" exp ";"

block      ::= "{" (vardecl)* (stmt)* "}"

exp        ::= "(" exp ")" exp'
             | (IDENT | INT_LITERAL) exp'
             | op exp exp'
             | CHAR_LITERAL exp'
             | STRING_LITERAL exp'
             | valueat exp'
             | addressof exp'
             | funcall exp'
             | sizeof exp'
             | typecast exp'

exp'        ::= binop exp
              | "[" exp "]" # Array access
              | "." IDENT   # Field access
              | e           # Empty set

binop        ::= ">" | "<" | ">=" | "<=" | "!=" | "==" | "+" | "-" | "/" | "*" | "%" | "||" | "&&"   # binary operators
op           ::= "-" | "+"

funcall      ::= IDENT "(" [ exp ("," exp)* ] ")" # function call
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
addressof    ::= "&" exp                          # Address-of operator
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")" exp                 # type casting


