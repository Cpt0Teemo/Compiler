# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= (include)* (structdecl)* (vardecl)* (fundecl)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT ";"                       # normal declaration, e.g. int a;
             | type IDENT "[" INT_LITERAL "]" ";"   # array declaration, e.g. int a[2];

fundecl    ::= type IDENT "(" params ")" block    # function declaration

type       ::= ("int" | "char" | "void" | structtype) ["*"]
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("," type IDENT)* ]

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp stmt'                              # expression/assignment statement, e.g. a function call

stmt'      ::= assign | ";"
assign     ::= "=" exp ";"

block      ::= "{" (vardecl)* (stmt)* "}"

expr1         ::= expr2 (( "||" ) expr1 | e)
expr2         ::= expr3 (( "&&" ) expr2 | e)
expr3         ::= expr4 (( "==" |  "!=" ) expr3 | e)
expr4         ::= expr5 (( ">" |  "<" |  "<=" |  ">=" ) expr4 | e)
expr5         ::= expr6 (( "+" |  "-" ) expr5 | e)
expr6         ::= expr7 (( "*" |  "/" | "%" ) expr6 | e)
expr7         ::= (( op |  "(" type ")" | "*" | "&" ) expr7)
                | expr8                                                                     #Right associative
expr8         ::= terminal (( funcall | "[" exp "]" | "." IDENT ) | e)

terminal    ::= "(" exp ")"
              | (IDENT | INT_LITERAL)
              | CHAR_LITERAL
              | STRING_LITERAL
              | sizeof

binop        ::= ">" | "<" | ">=" | "<=" | "!=" | "==" | "+" | "-" | "/" | "*" | "%" | "||" | "&&"   # binary operators
op           ::= "-" | "+"

funcall      ::= IDENT "(" [ exp ("," exp)* ] ")" # function call
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
addressof    ::= "&" exp                          # Address-of operator
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")" exp                 # type casting


